// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform.proto

#ifndef PROTOBUF_platform_2eproto__INCLUDED
#define PROTOBUF_platform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace framework {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_platform_2eproto();
void protobuf_AssignDesc_platform_2eproto();
void protobuf_ShutdownFile_platform_2eproto();

class AndroidEditTextMessage;
class LJSDKInfo;

enum SDKType {
  SDK_YY = 0,
  SDK_IAPPPAY = 1,
  SDK_JODO = 2,
  SDK_ITOOLS_IOS = 3,
  SDK_PP_IOS = 4,
  SDK_LJ = 5,
  SDK_YY_IOS = 6,
  SDK_UC = 7,
  SDK_YYZC = 8,
  SDK_YYZCLH = 9,
  SDK_TB_IOS = 10,
  SDK_KY_IOS = 11,
  SDK_XY_IOS = 12,
  SDK_AS_IOS = 13,
  SDK_APP_IOS = 14,
  SDK_IIAPPLE_IOS = 15,
  SDK_YYLH = 16,
  SDK_BAIDU = 17,
  SDK_XIAOMI = 18,
  SDK_C360 = 19,
  SDK_OPPO = 20,
  SDK_ANZHI = 21,
  SDK_WDJ = 22,
  SDK_WANKA = 23,
  SDK_YYB = 24,
  SDK_HM_IOS = 25,
  SDK_ZC_IOS = 26
};
bool SDKType_IsValid(int value);
const SDKType SDKType_MIN = SDK_YY;
const SDKType SDKType_MAX = SDK_ZC_IOS;
const int SDKType_ARRAYSIZE = SDKType_MAX + 1;

// ===================================================================

class AndroidEditTextMessage : public ::google::protobuf::MessageLite {
 public:
  AndroidEditTextMessage();
  virtual ~AndroidEditTextMessage();
  
  AndroidEditTextMessage(const AndroidEditTextMessage& from);
  
  inline AndroidEditTextMessage& operator=(const AndroidEditTextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AndroidEditTextMessage& default_instance();
  
  void Swap(AndroidEditTextMessage* other);
  
  // implements Message ----------------------------------------------
  
  AndroidEditTextMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AndroidEditTextMessage& from);
  void MergeFrom(const AndroidEditTextMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:framework.AndroidEditTextMessage)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_platform_2eproto();
  friend void protobuf_AssignDesc_platform_2eproto();
  friend void protobuf_ShutdownFile_platform_2eproto();
  
  void InitAsDefaultInstance();
  static AndroidEditTextMessage* default_instance_;
};
// -------------------------------------------------------------------

class LJSDKInfo : public ::google::protobuf::MessageLite {
 public:
  LJSDKInfo();
  virtual ~LJSDKInfo();
  
  LJSDKInfo(const LJSDKInfo& from);
  
  inline LJSDKInfo& operator=(const LJSDKInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const LJSDKInfo& default_instance();
  
  void Swap(LJSDKInfo* other);
  
  // implements Message ----------------------------------------------
  
  LJSDKInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LJSDKInfo& from);
  void MergeFrom(const LJSDKInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  
  // required string channelUserID = 2;
  inline bool has_channeluserid() const;
  inline void clear_channeluserid();
  static const int kChannelUserIDFieldNumber = 2;
  inline const ::std::string& channeluserid() const;
  inline void set_channeluserid(const ::std::string& value);
  inline void set_channeluserid(const char* value);
  inline void set_channeluserid(const char* value, size_t size);
  inline ::std::string* mutable_channeluserid();
  inline ::std::string* release_channeluserid();
  
  // required string channelID = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIDFieldNumber = 3;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  
  // required string channelLabel = 4;
  inline bool has_channellabel() const;
  inline void clear_channellabel();
  static const int kChannelLabelFieldNumber = 4;
  inline const ::std::string& channellabel() const;
  inline void set_channellabel(const ::std::string& value);
  inline void set_channellabel(const char* value);
  inline void set_channellabel(const char* value, size_t size);
  inline ::std::string* mutable_channellabel();
  inline ::std::string* release_channellabel();
  
  // required string userName = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string token = 6;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 6;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // required string productCode = 7;
  inline bool has_productcode() const;
  inline void clear_productcode();
  static const int kProductCodeFieldNumber = 7;
  inline const ::std::string& productcode() const;
  inline void set_productcode(const ::std::string& value);
  inline void set_productcode(const char* value);
  inline void set_productcode(const char* value, size_t size);
  inline ::std::string* mutable_productcode();
  inline ::std::string* release_productcode();
  
  // @@protoc_insertion_point(class_scope:framework.LJSDKInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channeluserid();
  inline void clear_has_channeluserid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_channellabel();
  inline void clear_has_channellabel();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_productcode();
  inline void clear_has_productcode();
  
  ::std::string* userid_;
  ::std::string* channeluserid_;
  ::std::string* channelid_;
  ::std::string* channellabel_;
  ::std::string* username_;
  ::std::string* token_;
  ::std::string* productcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_platform_2eproto();
  friend void protobuf_AssignDesc_platform_2eproto();
  friend void protobuf_ShutdownFile_platform_2eproto();
  
  void InitAsDefaultInstance();
  static LJSDKInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AndroidEditTextMessage

// required string content = 1;
inline bool AndroidEditTextMessage::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidEditTextMessage::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AndroidEditTextMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AndroidEditTextMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AndroidEditTextMessage::content() const {
  return *content_;
}
inline void AndroidEditTextMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void AndroidEditTextMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void AndroidEditTextMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AndroidEditTextMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* AndroidEditTextMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LJSDKInfo

// required string userId = 1;
inline bool LJSDKInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LJSDKInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LJSDKInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LJSDKInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& LJSDKInfo::userid() const {
  return *userid_;
}
inline void LJSDKInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void LJSDKInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void LJSDKInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* LJSDKInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string channelUserID = 2;
inline bool LJSDKInfo::has_channeluserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LJSDKInfo::set_has_channeluserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LJSDKInfo::clear_has_channeluserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LJSDKInfo::clear_channeluserid() {
  if (channeluserid_ != &::google::protobuf::internal::kEmptyString) {
    channeluserid_->clear();
  }
  clear_has_channeluserid();
}
inline const ::std::string& LJSDKInfo::channeluserid() const {
  return *channeluserid_;
}
inline void LJSDKInfo::set_channeluserid(const ::std::string& value) {
  set_has_channeluserid();
  if (channeluserid_ == &::google::protobuf::internal::kEmptyString) {
    channeluserid_ = new ::std::string;
  }
  channeluserid_->assign(value);
}
inline void LJSDKInfo::set_channeluserid(const char* value) {
  set_has_channeluserid();
  if (channeluserid_ == &::google::protobuf::internal::kEmptyString) {
    channeluserid_ = new ::std::string;
  }
  channeluserid_->assign(value);
}
inline void LJSDKInfo::set_channeluserid(const char* value, size_t size) {
  set_has_channeluserid();
  if (channeluserid_ == &::google::protobuf::internal::kEmptyString) {
    channeluserid_ = new ::std::string;
  }
  channeluserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_channeluserid() {
  set_has_channeluserid();
  if (channeluserid_ == &::google::protobuf::internal::kEmptyString) {
    channeluserid_ = new ::std::string;
  }
  return channeluserid_;
}
inline ::std::string* LJSDKInfo::release_channeluserid() {
  clear_has_channeluserid();
  if (channeluserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channeluserid_;
    channeluserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string channelID = 3;
inline bool LJSDKInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LJSDKInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LJSDKInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LJSDKInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& LJSDKInfo::channelid() const {
  return *channelid_;
}
inline void LJSDKInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void LJSDKInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void LJSDKInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* LJSDKInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string channelLabel = 4;
inline bool LJSDKInfo::has_channellabel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LJSDKInfo::set_has_channellabel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LJSDKInfo::clear_has_channellabel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LJSDKInfo::clear_channellabel() {
  if (channellabel_ != &::google::protobuf::internal::kEmptyString) {
    channellabel_->clear();
  }
  clear_has_channellabel();
}
inline const ::std::string& LJSDKInfo::channellabel() const {
  return *channellabel_;
}
inline void LJSDKInfo::set_channellabel(const ::std::string& value) {
  set_has_channellabel();
  if (channellabel_ == &::google::protobuf::internal::kEmptyString) {
    channellabel_ = new ::std::string;
  }
  channellabel_->assign(value);
}
inline void LJSDKInfo::set_channellabel(const char* value) {
  set_has_channellabel();
  if (channellabel_ == &::google::protobuf::internal::kEmptyString) {
    channellabel_ = new ::std::string;
  }
  channellabel_->assign(value);
}
inline void LJSDKInfo::set_channellabel(const char* value, size_t size) {
  set_has_channellabel();
  if (channellabel_ == &::google::protobuf::internal::kEmptyString) {
    channellabel_ = new ::std::string;
  }
  channellabel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_channellabel() {
  set_has_channellabel();
  if (channellabel_ == &::google::protobuf::internal::kEmptyString) {
    channellabel_ = new ::std::string;
  }
  return channellabel_;
}
inline ::std::string* LJSDKInfo::release_channellabel() {
  clear_has_channellabel();
  if (channellabel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channellabel_;
    channellabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string userName = 5;
inline bool LJSDKInfo::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LJSDKInfo::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LJSDKInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LJSDKInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LJSDKInfo::username() const {
  return *username_;
}
inline void LJSDKInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LJSDKInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LJSDKInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LJSDKInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string token = 6;
inline bool LJSDKInfo::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LJSDKInfo::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LJSDKInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LJSDKInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& LJSDKInfo::token() const {
  return *token_;
}
inline void LJSDKInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LJSDKInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LJSDKInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* LJSDKInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string productCode = 7;
inline bool LJSDKInfo::has_productcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LJSDKInfo::set_has_productcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LJSDKInfo::clear_has_productcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LJSDKInfo::clear_productcode() {
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    productcode_->clear();
  }
  clear_has_productcode();
}
inline const ::std::string& LJSDKInfo::productcode() const {
  return *productcode_;
}
inline void LJSDKInfo::set_productcode(const ::std::string& value) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(value);
}
inline void LJSDKInfo::set_productcode(const char* value) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(value);
}
inline void LJSDKInfo::set_productcode(const char* value, size_t size) {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  productcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LJSDKInfo::mutable_productcode() {
  set_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    productcode_ = new ::std::string;
  }
  return productcode_;
}
inline ::std::string* LJSDKInfo::release_productcode() {
  clear_has_productcode();
  if (productcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productcode_;
    productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_platform_2eproto__INCLUDED
