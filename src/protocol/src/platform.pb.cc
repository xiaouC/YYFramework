// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "platform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace framework {

void protobuf_ShutdownFile_platform_2eproto() {
  delete AndroidEditTextMessage::default_instance_;
  delete LJSDKInfo::default_instance_;
}

void protobuf_AddDesc_platform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  AndroidEditTextMessage::default_instance_ = new AndroidEditTextMessage();
  LJSDKInfo::default_instance_ = new LJSDKInfo();
  AndroidEditTextMessage::default_instance_->InitAsDefaultInstance();
  LJSDKInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_platform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_platform_2eproto {
  StaticDescriptorInitializer_platform_2eproto() {
    protobuf_AddDesc_platform_2eproto();
  }
} static_descriptor_initializer_platform_2eproto_;

bool SDKType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AndroidEditTextMessage::kContentFieldNumber;
#endif  // !_MSC_VER

AndroidEditTextMessage::AndroidEditTextMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AndroidEditTextMessage::InitAsDefaultInstance() {
}

AndroidEditTextMessage::AndroidEditTextMessage(const AndroidEditTextMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AndroidEditTextMessage::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AndroidEditTextMessage::~AndroidEditTextMessage() {
  SharedDtor();
}

void AndroidEditTextMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void AndroidEditTextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AndroidEditTextMessage& AndroidEditTextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_platform_2eproto();  return *default_instance_;
}

AndroidEditTextMessage* AndroidEditTextMessage::default_instance_ = NULL;

AndroidEditTextMessage* AndroidEditTextMessage::New() const {
  return new AndroidEditTextMessage;
}

void AndroidEditTextMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AndroidEditTextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AndroidEditTextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
}

int AndroidEditTextMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndroidEditTextMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AndroidEditTextMessage*>(&from));
}

void AndroidEditTextMessage::MergeFrom(const AndroidEditTextMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void AndroidEditTextMessage::CopyFrom(const AndroidEditTextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidEditTextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AndroidEditTextMessage::Swap(AndroidEditTextMessage* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AndroidEditTextMessage::GetTypeName() const {
  return "framework.AndroidEditTextMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int LJSDKInfo::kUserIdFieldNumber;
const int LJSDKInfo::kChannelUserIDFieldNumber;
const int LJSDKInfo::kChannelIDFieldNumber;
const int LJSDKInfo::kChannelLabelFieldNumber;
const int LJSDKInfo::kUserNameFieldNumber;
const int LJSDKInfo::kTokenFieldNumber;
const int LJSDKInfo::kProductCodeFieldNumber;
#endif  // !_MSC_VER

LJSDKInfo::LJSDKInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LJSDKInfo::InitAsDefaultInstance() {
}

LJSDKInfo::LJSDKInfo(const LJSDKInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LJSDKInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channeluserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channellabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LJSDKInfo::~LJSDKInfo() {
  SharedDtor();
}

void LJSDKInfo::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (channeluserid_ != &::google::protobuf::internal::kEmptyString) {
    delete channeluserid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channellabel_ != &::google::protobuf::internal::kEmptyString) {
    delete channellabel_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (productcode_ != &::google::protobuf::internal::kEmptyString) {
    delete productcode_;
  }
  if (this != default_instance_) {
  }
}

void LJSDKInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LJSDKInfo& LJSDKInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_platform_2eproto();  return *default_instance_;
}

LJSDKInfo* LJSDKInfo::default_instance_ = NULL;

LJSDKInfo* LJSDKInfo::New() const {
  return new LJSDKInfo;
}

void LJSDKInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_channeluserid()) {
      if (channeluserid_ != &::google::protobuf::internal::kEmptyString) {
        channeluserid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_channellabel()) {
      if (channellabel_ != &::google::protobuf::internal::kEmptyString) {
        channellabel_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_productcode()) {
      if (productcode_ != &::google::protobuf::internal::kEmptyString) {
        productcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LJSDKInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channelUserID;
        break;
      }
      
      // required string channelUserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channeluserid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelID;
        break;
      }
      
      // required string channelID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channelLabel;
        break;
      }
      
      // required string channelLabel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channellabel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }
      
      // required string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }
      
      // required string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_productCode;
        break;
      }
      
      // required string productCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LJSDKInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }
  
  // required string channelUserID = 2;
  if (has_channeluserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channeluserid(), output);
  }
  
  // required string channelID = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }
  
  // required string channelLabel = 4;
  if (has_channellabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channellabel(), output);
  }
  
  // required string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }
  
  // required string productCode = 7;
  if (has_productcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->productcode(), output);
  }
  
}

int LJSDKInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string channelUserID = 2;
    if (has_channeluserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channeluserid());
    }
    
    // required string channelID = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }
    
    // required string channelLabel = 4;
    if (has_channellabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channellabel());
    }
    
    // required string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required string productCode = 7;
    if (has_productcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LJSDKInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LJSDKInfo*>(&from));
}

void LJSDKInfo::MergeFrom(const LJSDKInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channeluserid()) {
      set_channeluserid(from.channeluserid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_channellabel()) {
      set_channellabel(from.channellabel());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_productcode()) {
      set_productcode(from.productcode());
    }
  }
}

void LJSDKInfo::CopyFrom(const LJSDKInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LJSDKInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void LJSDKInfo::Swap(LJSDKInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(channeluserid_, other->channeluserid_);
    std::swap(channelid_, other->channelid_);
    std::swap(channellabel_, other->channellabel_);
    std::swap(username_, other->username_);
    std::swap(token_, other->token_);
    std::swap(productcode_, other->productcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LJSDKInfo::GetTypeName() const {
  return "framework.LJSDKInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework

// @@protoc_insertion_point(global_scope)
