// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto__INCLUDED
#define PROTOBUF_map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace framework {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_map_2eproto();
void protobuf_AssignDesc_map_2eproto();
void protobuf_ShutdownFile_map_2eproto();

class GridInfo;
class AllGridState;
class SpriteInfo;
class MapBlock;
class BlockInfo;
class SeamlessMap;

// ===================================================================

class GridInfo : public ::google::protobuf::MessageLite {
 public:
  GridInfo();
  virtual ~GridInfo();
  
  GridInfo(const GridInfo& from);
  
  inline GridInfo& operator=(const GridInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const GridInfo& default_instance();
  
  void Swap(GridInfo* other);
  
  // implements Message ----------------------------------------------
  
  GridInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GridInfo& from);
  void MergeFrom(const GridInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // @@protoc_insertion_point(class_scope:framework.GridInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_file();
  inline void clear_has_file();
  
  ::std::string* file_;
  ::google::protobuf::int32 state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static GridInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllGridState : public ::google::protobuf::MessageLite {
 public:
  AllGridState();
  virtual ~AllGridState();
  
  AllGridState(const AllGridState& from);
  
  inline AllGridState& operator=(const AllGridState& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AllGridState& default_instance();
  
  void Swap(AllGridState* other);
  
  // implements Message ----------------------------------------------
  
  AllGridState* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AllGridState& from);
  void MergeFrom(const AllGridState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .framework.GridInfo grid_states = 1;
  inline int grid_states_size() const;
  inline void clear_grid_states();
  static const int kGridStatesFieldNumber = 1;
  inline const ::framework::GridInfo& grid_states(int index) const;
  inline ::framework::GridInfo* mutable_grid_states(int index);
  inline ::framework::GridInfo* add_grid_states();
  inline const ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >&
      grid_states() const;
  inline ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >*
      mutable_grid_states();
  
  // @@protoc_insertion_point(class_scope:framework.AllGridState)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::framework::GridInfo > grid_states_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static AllGridState* default_instance_;
};
// -------------------------------------------------------------------

class SpriteInfo : public ::google::protobuf::MessageLite {
 public:
  SpriteInfo();
  virtual ~SpriteInfo();
  
  SpriteInfo(const SpriteInfo& from);
  
  inline SpriteInfo& operator=(const SpriteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SpriteInfo& default_instance();
  
  void Swap(SpriteInfo* other);
  
  // implements Message ----------------------------------------------
  
  SpriteInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SpriteInfo& from);
  void MergeFrom(const SpriteInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);
  
  // required float scale = 4;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 4;
  inline float scale() const;
  inline void set_scale(float value);
  
  // required float rotation = 5;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 5;
  inline float rotation() const;
  inline void set_rotation(float value);
  
  // required int32 z_order = 6;
  inline bool has_z_order() const;
  inline void clear_z_order();
  static const int kZOrderFieldNumber = 6;
  inline ::google::protobuf::int32 z_order() const;
  inline void set_z_order(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:framework.SpriteInfo)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_z_order();
  inline void clear_has_z_order();
  
  ::std::string* file_;
  float x_;
  float y_;
  float scale_;
  float rotation_;
  ::google::protobuf::int32 z_order_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static SpriteInfo* default_instance_;
};
// -------------------------------------------------------------------

class MapBlock : public ::google::protobuf::MessageLite {
 public:
  MapBlock();
  virtual ~MapBlock();
  
  MapBlock(const MapBlock& from);
  
  inline MapBlock& operator=(const MapBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MapBlock& default_instance();
  
  void Swap(MapBlock* other);
  
  // implements Message ----------------------------------------------
  
  MapBlock* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MapBlock& from);
  void MergeFrom(const MapBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 row = 2;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);
  
  // required int32 col = 3;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 3;
  inline ::google::protobuf::int32 col() const;
  inline void set_col(::google::protobuf::int32 value);
  
  // required int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // required int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // repeated .framework.SpriteInfo sprites = 6;
  inline int sprites_size() const;
  inline void clear_sprites();
  static const int kSpritesFieldNumber = 6;
  inline const ::framework::SpriteInfo& sprites(int index) const;
  inline ::framework::SpriteInfo* mutable_sprites(int index);
  inline ::framework::SpriteInfo* add_sprites();
  inline const ::google::protobuf::RepeatedPtrField< ::framework::SpriteInfo >&
      sprites() const;
  inline ::google::protobuf::RepeatedPtrField< ::framework::SpriteInfo >*
      mutable_sprites();
  
  // repeated .framework.GridInfo grid_states = 7;
  inline int grid_states_size() const;
  inline void clear_grid_states();
  static const int kGridStatesFieldNumber = 7;
  inline const ::framework::GridInfo& grid_states(int index) const;
  inline ::framework::GridInfo* mutable_grid_states(int index);
  inline ::framework::GridInfo* add_grid_states();
  inline const ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >&
      grid_states() const;
  inline ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >*
      mutable_grid_states();
  
  // required string material = 8;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 8;
  inline const ::std::string& material() const;
  inline void set_material(const ::std::string& value);
  inline void set_material(const char* value);
  inline void set_material(const char* value, size_t size);
  inline ::std::string* mutable_material();
  inline ::std::string* release_material();
  
  // @@protoc_insertion_point(class_scope:framework.MapBlock)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_col();
  inline void clear_has_col();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_material();
  inline void clear_has_material();
  
  ::std::string* name_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedPtrField< ::framework::SpriteInfo > sprites_;
  ::google::protobuf::RepeatedPtrField< ::framework::GridInfo > grid_states_;
  ::std::string* material_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static MapBlock* default_instance_;
};
// -------------------------------------------------------------------

class BlockInfo : public ::google::protobuf::MessageLite {
 public:
  BlockInfo();
  virtual ~BlockInfo();
  
  BlockInfo(const BlockInfo& from);
  
  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BlockInfo& default_instance();
  
  void Swap(BlockInfo* other);
  
  // implements Message ----------------------------------------------
  
  BlockInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:framework.BlockInfo)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::std::string* file_;
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static BlockInfo* default_instance_;
};
// -------------------------------------------------------------------

class SeamlessMap : public ::google::protobuf::MessageLite {
 public:
  SeamlessMap();
  virtual ~SeamlessMap();
  
  SeamlessMap(const SeamlessMap& from);
  
  inline SeamlessMap& operator=(const SeamlessMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const SeamlessMap& default_instance();
  
  void Swap(SeamlessMap* other);
  
  // implements Message ----------------------------------------------
  
  SeamlessMap* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SeamlessMap& from);
  void MergeFrom(const SeamlessMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 blockRow = 1;
  inline bool has_blockrow() const;
  inline void clear_blockrow();
  static const int kBlockRowFieldNumber = 1;
  inline ::google::protobuf::int32 blockrow() const;
  inline void set_blockrow(::google::protobuf::int32 value);
  
  // required int32 blockCol = 2;
  inline bool has_blockcol() const;
  inline void clear_blockcol();
  static const int kBlockColFieldNumber = 2;
  inline ::google::protobuf::int32 blockcol() const;
  inline void set_blockcol(::google::protobuf::int32 value);
  
  // required int32 gridWidth = 3;
  inline bool has_gridwidth() const;
  inline void clear_gridwidth();
  static const int kGridWidthFieldNumber = 3;
  inline ::google::protobuf::int32 gridwidth() const;
  inline void set_gridwidth(::google::protobuf::int32 value);
  
  // required int32 gridHeight = 4;
  inline bool has_gridheight() const;
  inline void clear_gridheight();
  static const int kGridHeightFieldNumber = 4;
  inline ::google::protobuf::int32 gridheight() const;
  inline void set_gridheight(::google::protobuf::int32 value);
  
  // repeated .framework.BlockInfo blocks = 5;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 5;
  inline const ::framework::BlockInfo& blocks(int index) const;
  inline ::framework::BlockInfo* mutable_blocks(int index);
  inline ::framework::BlockInfo* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::framework::BlockInfo >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::framework::BlockInfo >*
      mutable_blocks();
  
  // @@protoc_insertion_point(class_scope:framework.SeamlessMap)
 private:
  inline void set_has_blockrow();
  inline void clear_has_blockrow();
  inline void set_has_blockcol();
  inline void clear_has_blockcol();
  inline void set_has_gridwidth();
  inline void clear_has_gridwidth();
  inline void set_has_gridheight();
  inline void clear_has_gridheight();
  
  ::google::protobuf::int32 blockrow_;
  ::google::protobuf::int32 blockcol_;
  ::google::protobuf::int32 gridwidth_;
  ::google::protobuf::int32 gridheight_;
  ::google::protobuf::RepeatedPtrField< ::framework::BlockInfo > blocks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();
  
  void InitAsDefaultInstance();
  static SeamlessMap* default_instance_;
};
// ===================================================================


// ===================================================================

// GridInfo

// required int32 state = 1;
inline bool GridInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GridInfo::state() const {
  return state_;
}
inline void GridInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string file = 2;
inline bool GridInfo::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridInfo::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridInfo::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridInfo::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& GridInfo::file() const {
  return *file_;
}
inline void GridInfo::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GridInfo::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GridInfo::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GridInfo::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* GridInfo::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AllGridState

// repeated .framework.GridInfo grid_states = 1;
inline int AllGridState::grid_states_size() const {
  return grid_states_.size();
}
inline void AllGridState::clear_grid_states() {
  grid_states_.Clear();
}
inline const ::framework::GridInfo& AllGridState::grid_states(int index) const {
  return grid_states_.Get(index);
}
inline ::framework::GridInfo* AllGridState::mutable_grid_states(int index) {
  return grid_states_.Mutable(index);
}
inline ::framework::GridInfo* AllGridState::add_grid_states() {
  return grid_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >&
AllGridState::grid_states() const {
  return grid_states_;
}
inline ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >*
AllGridState::mutable_grid_states() {
  return &grid_states_;
}

// -------------------------------------------------------------------

// SpriteInfo

// required string file = 1;
inline bool SpriteInfo::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriteInfo::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriteInfo::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriteInfo::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& SpriteInfo::file() const {
  return *file_;
}
inline void SpriteInfo::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void SpriteInfo::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void SpriteInfo::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpriteInfo::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* SpriteInfo::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float x = 2;
inline bool SpriteInfo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriteInfo::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriteInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriteInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float SpriteInfo::x() const {
  return x_;
}
inline void SpriteInfo::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool SpriteInfo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpriteInfo::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpriteInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpriteInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float SpriteInfo::y() const {
  return y_;
}
inline void SpriteInfo::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float scale = 4;
inline bool SpriteInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpriteInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpriteInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpriteInfo::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float SpriteInfo::scale() const {
  return scale_;
}
inline void SpriteInfo::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// required float rotation = 5;
inline bool SpriteInfo::has_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpriteInfo::set_has_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpriteInfo::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpriteInfo::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline float SpriteInfo::rotation() const {
  return rotation_;
}
inline void SpriteInfo::set_rotation(float value) {
  set_has_rotation();
  rotation_ = value;
}

// required int32 z_order = 6;
inline bool SpriteInfo::has_z_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpriteInfo::set_has_z_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpriteInfo::clear_has_z_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpriteInfo::clear_z_order() {
  z_order_ = 0;
  clear_has_z_order();
}
inline ::google::protobuf::int32 SpriteInfo::z_order() const {
  return z_order_;
}
inline void SpriteInfo::set_z_order(::google::protobuf::int32 value) {
  set_has_z_order();
  z_order_ = value;
}

// -------------------------------------------------------------------

// MapBlock

// required string name = 1;
inline bool MapBlock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapBlock::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapBlock::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapBlock::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MapBlock::name() const {
  return *name_;
}
inline void MapBlock::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapBlock::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MapBlock::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapBlock::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MapBlock::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 row = 2;
inline bool MapBlock::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapBlock::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapBlock::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapBlock::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 MapBlock::row() const {
  return row_;
}
inline void MapBlock::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
}

// required int32 col = 3;
inline bool MapBlock::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapBlock::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapBlock::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapBlock::clear_col() {
  col_ = 0;
  clear_has_col();
}
inline ::google::protobuf::int32 MapBlock::col() const {
  return col_;
}
inline void MapBlock::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
}

// required int32 width = 4;
inline bool MapBlock::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapBlock::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapBlock::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapBlock::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MapBlock::width() const {
  return width_;
}
inline void MapBlock::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 5;
inline bool MapBlock::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapBlock::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapBlock::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapBlock::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MapBlock::height() const {
  return height_;
}
inline void MapBlock::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// repeated .framework.SpriteInfo sprites = 6;
inline int MapBlock::sprites_size() const {
  return sprites_.size();
}
inline void MapBlock::clear_sprites() {
  sprites_.Clear();
}
inline const ::framework::SpriteInfo& MapBlock::sprites(int index) const {
  return sprites_.Get(index);
}
inline ::framework::SpriteInfo* MapBlock::mutable_sprites(int index) {
  return sprites_.Mutable(index);
}
inline ::framework::SpriteInfo* MapBlock::add_sprites() {
  return sprites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::framework::SpriteInfo >&
MapBlock::sprites() const {
  return sprites_;
}
inline ::google::protobuf::RepeatedPtrField< ::framework::SpriteInfo >*
MapBlock::mutable_sprites() {
  return &sprites_;
}

// repeated .framework.GridInfo grid_states = 7;
inline int MapBlock::grid_states_size() const {
  return grid_states_.size();
}
inline void MapBlock::clear_grid_states() {
  grid_states_.Clear();
}
inline const ::framework::GridInfo& MapBlock::grid_states(int index) const {
  return grid_states_.Get(index);
}
inline ::framework::GridInfo* MapBlock::mutable_grid_states(int index) {
  return grid_states_.Mutable(index);
}
inline ::framework::GridInfo* MapBlock::add_grid_states() {
  return grid_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >&
MapBlock::grid_states() const {
  return grid_states_;
}
inline ::google::protobuf::RepeatedPtrField< ::framework::GridInfo >*
MapBlock::mutable_grid_states() {
  return &grid_states_;
}

// required string material = 8;
inline bool MapBlock::has_material() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MapBlock::set_has_material() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MapBlock::clear_has_material() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MapBlock::clear_material() {
  if (material_ != &::google::protobuf::internal::kEmptyString) {
    material_->clear();
  }
  clear_has_material();
}
inline const ::std::string& MapBlock::material() const {
  return *material_;
}
inline void MapBlock::set_material(const ::std::string& value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(value);
}
inline void MapBlock::set_material(const char* value) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(value);
}
inline void MapBlock::set_material(const char* value, size_t size) {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  material_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapBlock::mutable_material() {
  set_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    material_ = new ::std::string;
  }
  return material_;
}
inline ::std::string* MapBlock::release_material() {
  clear_has_material();
  if (material_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = material_;
    material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BlockInfo

// required string file = 1;
inline bool BlockInfo::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockInfo::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockInfo::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockInfo::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& BlockInfo::file() const {
  return *file_;
}
inline void BlockInfo::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void BlockInfo::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void BlockInfo::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockInfo::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* BlockInfo::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float x = 2;
inline bool BlockInfo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockInfo::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BlockInfo::x() const {
  return x_;
}
inline void BlockInfo::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool BlockInfo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockInfo::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BlockInfo::y() const {
  return y_;
}
inline void BlockInfo::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// SeamlessMap

// required int32 blockRow = 1;
inline bool SeamlessMap::has_blockrow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeamlessMap::set_has_blockrow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeamlessMap::clear_has_blockrow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeamlessMap::clear_blockrow() {
  blockrow_ = 0;
  clear_has_blockrow();
}
inline ::google::protobuf::int32 SeamlessMap::blockrow() const {
  return blockrow_;
}
inline void SeamlessMap::set_blockrow(::google::protobuf::int32 value) {
  set_has_blockrow();
  blockrow_ = value;
}

// required int32 blockCol = 2;
inline bool SeamlessMap::has_blockcol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeamlessMap::set_has_blockcol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeamlessMap::clear_has_blockcol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeamlessMap::clear_blockcol() {
  blockcol_ = 0;
  clear_has_blockcol();
}
inline ::google::protobuf::int32 SeamlessMap::blockcol() const {
  return blockcol_;
}
inline void SeamlessMap::set_blockcol(::google::protobuf::int32 value) {
  set_has_blockcol();
  blockcol_ = value;
}

// required int32 gridWidth = 3;
inline bool SeamlessMap::has_gridwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeamlessMap::set_has_gridwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeamlessMap::clear_has_gridwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeamlessMap::clear_gridwidth() {
  gridwidth_ = 0;
  clear_has_gridwidth();
}
inline ::google::protobuf::int32 SeamlessMap::gridwidth() const {
  return gridwidth_;
}
inline void SeamlessMap::set_gridwidth(::google::protobuf::int32 value) {
  set_has_gridwidth();
  gridwidth_ = value;
}

// required int32 gridHeight = 4;
inline bool SeamlessMap::has_gridheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeamlessMap::set_has_gridheight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeamlessMap::clear_has_gridheight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeamlessMap::clear_gridheight() {
  gridheight_ = 0;
  clear_has_gridheight();
}
inline ::google::protobuf::int32 SeamlessMap::gridheight() const {
  return gridheight_;
}
inline void SeamlessMap::set_gridheight(::google::protobuf::int32 value) {
  set_has_gridheight();
  gridheight_ = value;
}

// repeated .framework.BlockInfo blocks = 5;
inline int SeamlessMap::blocks_size() const {
  return blocks_.size();
}
inline void SeamlessMap::clear_blocks() {
  blocks_.Clear();
}
inline const ::framework::BlockInfo& SeamlessMap::blocks(int index) const {
  return blocks_.Get(index);
}
inline ::framework::BlockInfo* SeamlessMap::mutable_blocks(int index) {
  return blocks_.Mutable(index);
}
inline ::framework::BlockInfo* SeamlessMap::add_blocks() {
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::framework::BlockInfo >&
SeamlessMap::blocks() const {
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::framework::BlockInfo >*
SeamlessMap::mutable_blocks() {
  return &blocks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto__INCLUDED
